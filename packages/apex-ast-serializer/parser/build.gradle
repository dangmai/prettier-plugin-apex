buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    // https://mvnrepository.com/artifact/org.apache.groovy/groovy-json
    classpath group: 'org.apache.groovy', name: 'groovy-json', version: '4.0.26'
  }
}
plugins {
  id 'java-library'
  id "java-test-fixtures"
  id 'application'
  id 'jacoco'
  id 'org.graalvm.buildtools.native' version '0.10.5'
}

sourceSets {
  test {
    resources {
      srcDirs "../../prettier-plugin-apex/tests"
    }
  }
  testFixtures {
    compileClasspath += sourceSets.main.compileClasspath
    runtimeClasspath += sourceSets.main.runtimeClasspath
  }
  graalvm {}
}

application {
  mainClass.set("net.dangmai.serializer.Apex")
  applicationDefaultJvmArgs = [
    "--add-opens=java.base/java.lang=ALL-UNNAMED",
    "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
    "--add-opens=java.base/java.util=ALL-UNNAMED",
    "--add-opens=java.base/java.text=ALL-UNNAMED"
  ]
}

java {
  group 'net.dangmai'
  version = new groovy.json.JsonSlurper().parse(file('../../../package.json')).version

  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
}

processResources {
  filesMatching('**/parser.properties') {
    filter {
      it.replace('0.0.0-DEV', version)
    }
  }
}

repositories {
  flatDir {
    dirs '../libs'
  }
  mavenCentral()
  maven { url "https://jitpack.io" }
  gradlePluginPortal()
}

run {
  standardInput = System.in
}

ext {
  junitVersion = '5.12.0'
}

dependencies {
  api name: 'apex-jorje-lsp'
  // https://mvnrepository.com/artifact/com.thoughtworks.xstream/xstream
  api group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.21'

  // https://mvnrepository.com/artifact/commons-cli/commons-cli
  api group: 'commons-cli', name: 'commons-cli', version: '1.9.0'

  // https://mvnrepository.com/artifact/commons-io/commons-io
  api group: 'commons-io', name: 'commons-io', version: '2.18.0'

  // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${junitVersion}"
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "${junitVersion}"
  testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.12.0'

  // https://mvnrepository.com/artifact/org.json/json
  testFixturesImplementation group: 'org.json', name: 'json', version: '20250107'

  // https://mvnrepository.com/artifact/io.github.classgraph/classgraph
  graalvmImplementation group: 'io.github.classgraph', name: 'classgraph', version: '4.8.179'
  nativeImageCompileOnly sourceSets.graalvm.output.classesDirs
}

configurations {
  nativeImageClasspath.extendsFrom(graalvmImplementation)
}

// Common configs for all Test tasks. Currently this includes the standard
// `test` task, and the `nativeInstrumentedTest` task.
tasks.withType(Test) {
  useJUnitPlatform()
  jvmArgs += application.applicationDefaultJvmArgs
  testLogging.showStandardStreams = true
}

test {
  finalizedBy jacocoTestReport
}
jacocoTestReport {
  reports {
    xml.required = true
  }
  dependsOn test
}

// This task can be used to run tests under native instrumentation
task nativeInstrumentedTest(type: Test) {
}

graalvmNative {
  metadataRepository {
    // Since version 0.10.0, the metadata repository is enabled by default,
    // The metadata repository contains community-driven collection of
    // reachability metadata for open-source libraries. However, they are
    // leading to issues with apex-jorje-lsp library, and I haven't found
    // a way to exclude it yet, so for now I'll disable it.
    enabled = false
  }
  agent {
    enabled = true
    defaultMode = "standard"

    // Weird syntax: https://github.com/graalvm/native-build-tools/issues/303
    // This is here because we don't want to set up the full native-image
    // system while running tests in CI/CD.
    java.util.function.Predicate predicate = { t -> t.name != 'test' && t.name != 'run' }
    tasksToInstrumentPredicate = predicate
  }
  binaries {
    main {
      configurationFileDirectories.from(
        file('build/native/agent-output/nativeInstrumentedTest')
      )
      imageName = 'apex-ast-serializer'
      sharedLibrary = false
      buildArgs.add('--features=net.dangmai.serializer.RuntimeReflectionRegistrationFeature')
      buildArgs.addAll(application.applicationDefaultJvmArgs)
      // Certain Linux distribution doesn't allow dynamic-linked binaries to be
      // run, for example, NixOS, so we need to build a static binary.
      if (System.getProperty('os.name').toLowerCase().contains('linux') && System.getProperty('os.arch').contains('amd64')) {
        environmentVariables.put("PATH", file('../musl-toolchain/bin').absolutePath + ":" + System.getenv("PATH"))
        buildArgs.add('--static');
        buildArgs.add('--libc=musl');
        // #1822 - By default, the native executable can't be run in Docker x64
        // images on macOS with M-chips. We set the compatibility flag to ensure
        // it can be run in that context, although it may not be as optimized.
        buildArgs.add('-march=compatibility');
        // #1733, #1809 - We need to manually increase stack size for musl static binary,
        // otherwise we will run into stack overflow issues.
        // https://github.com/oracle/graal/issues/3398
        buildArgs.add('-H:+UnlockExperimentalVMOptions');
        buildArgs.add('-H:CCompilerOption=-Wl,-z,stack-size=10485760');
      }
    }
  }
}

nativeCompile {
  mustRunAfter nativeInstrumentedTest
}
